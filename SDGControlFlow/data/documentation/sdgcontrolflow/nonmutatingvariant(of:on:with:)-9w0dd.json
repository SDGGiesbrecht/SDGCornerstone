{"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonmutatingVariant","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"mutation","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"theInstance","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"arguments","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":")) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"name":"mutation","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The mutating counterpart."}]}]},{"name":"theInstance","content":[{"type":"paragraph","inlineContent":[{"text":"The starting instance.","type":"text"}]}]},{"name":"arguments","content":[{"inlineContent":[{"text":"Arguments to pass to the mutating counterpart.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"codeListing","syntax":"swift","code":["extension Array where Element: Comparable {","","  func sorted() -> Array {","    return nonmutatingVariant(of: { $0.sort() }, on: self)","  }","  func appending(_ appendix: Array) -> Array {","    return nonmutatingVariant(of: { $0.append(contentsOf: $1) }, on: self, with: appendix)","  }","  static func + (a: Array, b: Array) -> Array {","    return nonmutatingVariant(of: +=, on: a, with: b)","  }","}"]}],"kind":"content"}],"metadata":{"modules":[{"name":"SDGControlFlow"}],"symbolKind":"func","role":"symbol","roleHeading":"Function","title":"nonmutatingVariant(of:on:with:)","externalID":"s:14SDGControlFlow18nonmutatingVariant2of2on4withxyxz_q_q0_tKXE_xq__q0_ttKr1_lF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonmutatingVariant","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")) "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}]},"kind":"symbol","identifier":{"url":"doc:\/\/SDGControlFlow\/documentation\/SDGControlFlow\/nonmutatingVariant(of:on:with:)-9w0dd","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SDGControlFlow\/documentation\/SDGControlFlow"]]},"abstract":[{"type":"text","text":"Implements a nonmutating function based on its mutating counterpart."}],"sections":[],"variants":[{"paths":["\/documentation\/sdgcontrolflow\/nonmutatingvariant(of:on:with:)-9w0dd"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SDGControlFlow/documentation/SDGControlFlow/nonmutatingVariant(of:on:with:)-9w0dd":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/SDGControlFlow\/documentation\/SDGControlFlow\/nonmutatingVariant(of:on:with:)-9w0dd","type":"topic","abstract":[{"text":"Implements a nonmutating function based on its mutating counterpart.","type":"text"}],"url":"\/documentation\/sdgcontrolflow\/nonmutatingvariant(of:on:with:)-9w0dd","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonmutatingVariant","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":")) "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"title":"nonmutatingVariant(of:on:with:)"},"doc://SDGControlFlow/documentation/SDGControlFlow":{"url":"\/documentation\/sdgcontrolflow","role":"collection","kind":"symbol","identifier":"doc:\/\/SDGControlFlow\/documentation\/SDGControlFlow","title":"SDGControlFlow","type":"topic","abstract":[{"type":"text","text":"Very low‚Äêlevel abstractions which can be used to reduce boilerplate code and simplify control flow."}]}}}