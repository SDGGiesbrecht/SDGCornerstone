/*
 Pattern.swift

 This source file is part of the SDGCornerstone open source project.
 https://sdggiesbrecht.github.io/SDGCornerstone

 Copyright Â©2022 Jeremy David Giesbrecht and the SDGCornerstone project contributors.

 Soli Deo gloria.

 Licensed under the Apache Licence, Version 2.0.
 See http://www.apache.org/licenses/LICENSE-2.0 for licence information.
 */

/// A pattern that can be searched for in collections with equatable elements.
public protocol Pattern {

  /// The type of collection that can be searched.
  typealias Searchable = Match.Searched

  /// The type of matches generated by the pattern.
  associatedtype Match: PatternMatch

  /// Returns the ranges of possible matches beginning at the specified index in the collection.
  ///
  /// The ranges are sorted in order of preference. Ranges can be tried one after another down through the list in the event that some should be disqualified for some external reason, such as being part of a larger composite pattern.
  ///
  /// - Parameters:
  ///     - collection: The collection in which to search.
  ///     - location: The index at which to check for the beginning of a match.
  func matches(in collection: Searchable, at location: Searchable.Index) -> [Match]

  /// Returns the primary match beginning at the specified index in the collection.
  ///
  /// This may be optimized, but the result must be the same as `matches(in: collection at: location).first`.
  ///
  /// - Parameters:
  ///     - collection: The collection in which to search.
  ///     - location: The index at which to check for the beginning of a match.
  func primaryMatch(
    in collection: Searchable,
    at location: Searchable.Index
  ) -> Match?
}

extension Pattern {

  @inlinable public func primaryMatch(
    in collection: Searchable,
    at location: Searchable.Index
  ) -> Match? {
    return matches(in: collection, at: location).first
  }
}
