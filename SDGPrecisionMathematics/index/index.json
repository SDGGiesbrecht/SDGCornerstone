{"interfaceLanguages":{"swift":[{"children":[{"title":"Package","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/sdgcornerstone","title":"SDGCornerstone","type":"article"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/+=(_:_:)-1dw1t","title":"static func += (inout Integer, Integer)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/==(_:_:)-902pr","title":"static func == (Integer, Integer) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-702o9","title":"static func < (Integer, Integer) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_=(_:_:)-1a33","title":"static func −= (inout Integer, Integer)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_=(_:_:)-31vwx","title":"static func ×= (inout Integer, Integer)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(_:)-19sho","title":"init(UIntMax)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(_:)-5ceew","title":"init(WholeNumber)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(_:)-z2nm","title":"init(IntMax)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(exactly:)","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isnegative-7091t","title":"var isNegative: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/divideaccordingtoeuclid(by:)","title":"func divideAccordingToEuclid(by: Integer)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/negate()-7cprz","title":"func negate()","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/vector","title":"Integer.Vector","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/random(in:using:)","title":"static func random<R>(in: ClosedRange<Integer>, using: inout R) -> Integer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/+(_:_:)-3sd1r","title":"static func + (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/addable-implementations","title":"Addable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/+=(_:_:)-17uy7","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/-(_:_:)-4ofmo","title":"static func - (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/-=(_:_:)-4vnzv","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/-=(_:_:)-8pgzw","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isapproximatelyequal(to:absolutetolerance:relativetolerance:norm:)","title":"func isApproximatelyEqual<Magnitude>(to: Self, absoluteTolerance: Magnitude, relativeTolerance: Magnitude, norm: (Self) -> Magnitude) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/'...(_:)-2rvu7","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/'...(_:)-6wosw","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-181sn","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-2a358","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-5sy7x","title":"static func ≥ (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-5yl2v","title":"static func ≈ (Self, (Self, Self)) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-v773","title":"static func ≤ (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_=(_:_:)-35n94","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_=(_:_:)-7l6o","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/decrease(to:)","title":"func decrease(to: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/increase(to:)","title":"func increase(to: Self)","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/playgrounddescription","title":"var playgroundDescription: Any","type":"property"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/customplaygrounddisplayconvertible-implementations","title":"CustomPlaygroundDisplayConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(from:via:convert:)-5z9ng","title":"init<Other>(from: Decoder, via: Other.Type, convert: (Other) throws -> Self?) throws","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(from:via:convert:)-88ba2","title":"init<Other>(from: Decoder, via: Other.Type, convert: (Other) -> Self) throws","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/encode(to:via:)","title":"func encode<Other>(to: Encoder, via: Other) throws","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/==(_:_:)-3lyoy","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/=_(_:_:)","title":"static func ≠ (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(integerliteral:)","title":"init(integerLiteral: UIntMax)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_____________(______:)","title":"func בספרות־עבריות(גרשיים: Bool) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/______________________(_______________:_______:)","title":"func σεΕλληνικούςΑριθμούς(μικράΓράμματα: Bool, κεραία: Bool) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/abbreviatedenglishordinal()","title":"func abbreviatedEnglishOrdinal() -> SemanticMarkup","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/abgeku_rztedeutscheordnungszahl()","title":"func abgekürzteDeutscheOrdnungszahl() -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/indigits(thousandsseparator:)","title":"func inDigits(thousandsSeparator: UnicodeScalar) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/inro_mischerzahlschrift(kleinbuchstaben:)","title":"func inRömischerZahlschrift(kleinbuchstaben: Bool) -> StrengeZeichenkette","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/inromannumerals(lowercase:)","title":"func inRomanNumerals(lowercase: Bool) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/inzahlzeichen(tausendertrennzeichen:)","title":"func inZahlzeichen(tausendertrennzeichen: Unicode.Skalar) -> StrengeZeichenkette","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/ordinalfranc_aisabre_ge_(genre:nombre:)","title":"func ordinalFrançaisAbrégé(genre: GenreGrammatical, nombre: GrammaticalNumber) -> SemanticMarkup","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/integerprotocol-implementations","title":"IntegerProtocol Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(_:)-8m9us","title":"init<I>(I)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/integralarithmetic-implementations","title":"IntegralArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/-(_:)-19c2l","title":"static func - (Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:)","title":"static func − (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/negate()-7ohjp","title":"func negate()","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/negate()-95739","title":"func negate()","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/negatable-implementations","title":"Negatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isnegative-3esnn","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isnonnegative","title":"var isNonNegative: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isnonpositive","title":"var isNonPositive: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/ispositive","title":"var isPositive: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/magnitude","title":"var magnitude: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/formabsolutevalue()","title":"func formAbsoluteValue()","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/numericadditivearithmetic-implementations","title":"NumericAdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/advanced(by:)","title":"func advanced(by: Self.Vector) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/decrement()","title":"func decrement()","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/distance(to:)","title":"func distance(to: Self) -> Self.Vector","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/increment()","title":"func increment()","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/predecessor()","title":"func predecessor() -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/successor()","title":"func successor() -> Self","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/onedimensionalpoint-implementations","title":"OneDimensionalPoint Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/+(_:_:)-49cpx","title":"static func + (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/+(_:_:)-5fiky","title":"static func + (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/+(_:_:)-9kiac","title":"static func + (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-1u8nn","title":"static func − (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-3ppf0","title":"static func − (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_=(_:_:)-4klmc","title":"static func −= (inout Self, Self.Vector)","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/pointprotocol-implementations","title":"PointProtocol Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/-(_:)-6i7d0","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/negate()-51vtk","title":"func negate()","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/-(_:_:)-1f5e6","title":"static func - (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/-=(_:_:)-3ev16","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-3kc50","title":"static func ± (Self, Self) -> (sum: Self, difference: Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-6qezr","title":"static func − (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/subtractable-implementations","title":"Subtractable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(_:)-uspd","title":"init(StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(binary:)","title":"init(binary: StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(hexadecimal:)","title":"init(hexadecimal: StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(octal:)","title":"init(octal: StrictString)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/parse(_:base:)","title":"static func parse(StrictString, base: Int) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/parse(fromrepresentation:usingdigits:radixcharacters:formattingseparators:)-3dyja","title":"static func parse(fromRepresentation: StrictString, usingDigits: [[UnicodeScalar]], radixCharacters: Set<UnicodeScalar>, formattingSeparators: Set<UnicodeScalar>) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/parse(fromrepresentation:usingdigits:radixcharacters:formattingseparators:)-53qca","title":"static func parse(fromRepresentation: StrictString, usingDigits: [[UnicodeScalar]], radixCharacters: Set<UnicodeScalar>, formattingSeparators: Set<UnicodeScalar>) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/parse(possiblebinary:)","title":"static func parse(possibleBinary: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/parse(possibledecimal:)","title":"static func parse(possibleDecimal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/parse(possiblehexadecimal:)","title":"static func parse(possibleHexadecimal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/parse(possibleoctal:)","title":"static func parse(possibleOctal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/textconvertiblenumber-implementations","title":"TextConvertibleNumber Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/*(_:_:)","title":"static func * (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/*=(_:_:)","title":"static func *= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-1g867","title":"static func × (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_(_:_:)-4h5wa","title":"static func ↑ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/_=(_:_:)-5ce1i","title":"static func ↑= (inout Self, Self)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/init(_:)-98vkl","title":"init<U>(U)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/iseven","title":"var isEven: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isintegral-2vvb6","title":"var isIntegral: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isintegral-8bxb5","title":"var isIntegral: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isnatural","title":"var isNatural: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isodd","title":"var isOdd: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/iswhole","title":"var isWhole: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/dividedaccordingtoeuclid(by:)","title":"func dividedAccordingToEuclid(by: Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/formgreatestcommondivisor(with:)","title":"func formGreatestCommonDivisor(with: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/formleastcommonmultiple(with:)","title":"func formLeastCommonMultiple(with: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/formremainder(mod:)","title":"func formRemainder(mod: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/isdivisible(by:)","title":"func isDivisible(by: Self) -> Bool","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/mod(_:)","title":"func mod(Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/round(_:)-15qvp","title":"func round(Self.RoundingRule)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/round(_:)-4sqy7","title":"func round(Self.RoundingRule)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/round(_:tomultipleof:)","title":"func round(Self.RoundingRule, toMultipleOf: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/rounded(_:)","title":"func rounded(Self.RoundingRule) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/rounded(_:tomultipleof:)","title":"func rounded(Self.RoundingRule, toMultipleOf: Self) -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/gcd(_:_:)","title":"static func gcd(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/lcm(_:_:)","title":"static func lcm(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/random(in:)","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/integer\/zufa_llige(in:)","title":"static func zufällige(in: ClosedRange<Self>) -> Self","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/integer\/wholearithmetic-implementations","title":"WholeArithmetic Implementations","type":"symbol"}],"path":"\/documentation\/sdgprecisionmathematics\/integer","title":"Integer","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/+=(_:_:)-3zwee","title":"static func += (inout RationalNumber, RationalNumber)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/==(_:_:)-6b4ud","title":"static func == (RationalNumber, RationalNumber) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-6vvex","title":"static func < (RationalNumber, RationalNumber) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_=(_:_:)-26snu","title":"static func −= (inout RationalNumber, RationalNumber)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_=(_:_:)-5v1d","title":"static func ×= (inout RationalNumber, RationalNumber)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_=(_:_:)-8ufwu","title":"static func ÷= (inout RationalNumber, RationalNumber)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(_:)-4q9p5","title":"init(FloatMax)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(_:)-511en","title":"init(IntMax)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(_:)-79679","title":"init(WholeNumber)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(_:)-95ayo","title":"init(Integer)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(_:)-oe57","title":"init(UIntMax)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(exactly:)","title":"init?<T>(exactly: T)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/denominator","title":"var denominator: Integer","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/numerator","title":"var numerator: Integer","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/divideaccordingtoeuclid(by:)","title":"func divideAccordingToEuclid(by: RationalNumber)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/negate()-u8bj","title":"func negate()","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/reducedsimplefraction()","title":"func reducedSimpleFraction() -> (numerator: Integer, denominator: Integer)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/vector","title":"RationalNumber.Vector","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/random(in:using:)-5qgz2","title":"static func random<R>(in: ClosedRange<RationalNumber>, using: inout R) -> RationalNumber","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/+(_:_:)-2ejco","title":"static func + (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/addable-implementations","title":"Addable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/+=(_:_:)-40b56","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/-(_:_:)-hge1","title":"static func - (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/-=(_:_:)-75wpl","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/-=(_:_:)-zbc5","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/isapproximatelyequal(to:absolutetolerance:relativetolerance:norm:)","title":"func isApproximatelyEqual<Magnitude>(to: Self, absoluteTolerance: Magnitude, relativeTolerance: Magnitude, norm: (Self) -> Magnitude) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/'...(_:)-3iqnm","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/'...(_:)-88707","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-2eg7w","title":"static func ≈ (Self, (Self, Self)) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-57rl4","title":"static func ≥ (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-5dgtp","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-5gcvd","title":"static func ≤ (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-5v4ka","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_=(_:_:)-1f31q","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_=(_:_:)-5ri0","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/decrease(to:)","title":"func decrease(to: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/increase(to:)","title":"func increase(to: Self)","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/playgrounddescription","title":"var playgroundDescription: Any","type":"property"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/customplaygrounddisplayconvertible-implementations","title":"CustomPlaygroundDisplayConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(from:via:convert:)-362ao","title":"init<Other>(from: Decoder, via: Other.Type, convert: (Other) throws -> Self?) throws","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(from:via:convert:)-cpz4","title":"init<Other>(from: Decoder, via: Other.Type, convert: (Other) -> Self) throws","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/encode(to:via:)","title":"func encode<Other>(to: Encoder, via: Other) throws","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/==(_:_:)-5jiju","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/=_(_:_:)","title":"static func ≠ (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(floatliteral:)","title":"init(floatLiteral: FloatMax)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(integerliteral:)","title":"init(integerLiteral: UIntMax)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(_:)-n9ak","title":"init<I>(I)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/integralarithmetic-implementations","title":"IntegralArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/-(_:)-1istg","title":"static func - (Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:)","title":"static func − (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/negate()-13we","title":"func negate()","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/negate()-5qu1v","title":"func negate()","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/negatable-implementations","title":"Negatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/isnonnegative","title":"var isNonNegative: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/isnonpositive","title":"var isNonPositive: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/ispositive","title":"var isPositive: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/magnitude","title":"var magnitude: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/formabsolutevalue()","title":"func formAbsoluteValue()","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/numericadditivearithmetic-implementations","title":"NumericAdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/advanced(by:)","title":"func advanced(by: Self.Vector) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/distance(to:)","title":"func distance(to: Self) -> Self.Vector","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/onedimensionalpoint-implementations","title":"OneDimensionalPoint Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/+(_:_:)-389gx","title":"static func + (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/+(_:_:)-6tw5r","title":"static func + (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/+(_:_:)-8sv33","title":"static func + (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-2nj51","title":"static func − (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-8ofir","title":"static func − (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_=(_:_:)-4cqs1","title":"static func −= (inout Self, Self.Vector)","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/pointprotocol-implementations","title":"PointProtocol Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-7eehx","title":"static func ÷ (Self, Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/indigits(maximumdecimalplaces:radixcharacter:thousandsseparator:)","title":"func inDigits(maximumDecimalPlaces: Int, radixCharacter: UnicodeScalar, thousandsSeparator: UnicodeScalar) -> StrictString","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/random(in:)-16kbn","title":"static func random(in: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/random(in:using:)-8stqg","title":"static func random<R>(in: Range<Self>, using: inout R) -> Self","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/rationalarithmetic-implementations","title":"RationalArithmetic Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/asmixedfraction(thousandsseparator:)","title":"func asMixedFraction(thousandsSeparator: UnicodeScalar) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/asratio(thousandsseparator:)","title":"func asRatio(thousandsSeparator: UnicodeScalar) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/assimplefraction(thousandsseparator:)","title":"func asSimpleFraction(thousandsSeparator: UnicodeScalar) -> StrictString","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/rationalnumberprotocol-implementations","title":"RationalNumberProtocol Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/-(_:)-2gd2f","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/negate()-9bjdv","title":"func negate()","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/-(_:_:)-5nwy2","title":"static func - (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/-=(_:_:)-7xghe","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-7unet","title":"static func ± (Self, Self) -> (sum: Self, difference: Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-87lus","title":"static func − (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/subtractable-implementations","title":"Subtractable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(_:)-25scy","title":"init(StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(binary:)","title":"init(binary: StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(hexadecimal:)","title":"init(hexadecimal: StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(octal:)","title":"init(octal: StrictString)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/parse(_:base:)","title":"static func parse(StrictString, base: Int) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/parse(fromrepresentation:usingdigits:radixcharacters:formattingseparators:)-6lna9","title":"static func parse(fromRepresentation: StrictString, usingDigits: [[UnicodeScalar]], radixCharacters: Set<UnicodeScalar>, formattingSeparators: Set<UnicodeScalar>) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/parse(fromrepresentation:usingdigits:radixcharacters:formattingseparators:)-8oyvl","title":"static func parse(fromRepresentation: StrictString, usingDigits: [[UnicodeScalar]], radixCharacters: Set<UnicodeScalar>, formattingSeparators: Set<UnicodeScalar>) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/parse(fromrepresentation:usingdigits:radixcharacters:formattingseparators:)-94fwk","title":"static func parse(fromRepresentation: StrictString, usingDigits: [[UnicodeScalar]], radixCharacters: Set<UnicodeScalar>, formattingSeparators: Set<UnicodeScalar>) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/parse(possiblebinary:)","title":"static func parse(possibleBinary: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/parse(possibledecimal:)","title":"static func parse(possibleDecimal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/parse(possiblehexadecimal:)","title":"static func parse(possibleHexadecimal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/parse(possibleoctal:)","title":"static func parse(possibleOctal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/textconvertiblenumber-implementations","title":"TextConvertibleNumber Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/*(_:_:)","title":"static func * (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/*=(_:_:)","title":"static func *= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-5hfy3","title":"static func ↑ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_(_:_:)-6mzb7","title":"static func × (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/_=(_:_:)-8z2s","title":"static func ↑= (inout Self, Self)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/init(_:)-6h41b","title":"init<U>(U)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/iseven","title":"var isEven: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/isintegral","title":"var isIntegral: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/isnatural","title":"var isNatural: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/isodd","title":"var isOdd: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/iswhole","title":"var isWhole: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/dividedaccordingtoeuclid(by:)","title":"func dividedAccordingToEuclid(by: Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/formgreatestcommondivisor(with:)","title":"func formGreatestCommonDivisor(with: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/formleastcommonmultiple(with:)","title":"func formLeastCommonMultiple(with: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/formremainder(mod:)","title":"func formRemainder(mod: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/isdivisible(by:)","title":"func isDivisible(by: Self) -> Bool","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/mod(_:)","title":"func mod(Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/round(_:)","title":"func round(Self.RoundingRule)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/round(_:tomultipleof:)","title":"func round(Self.RoundingRule, toMultipleOf: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/rounded(_:)","title":"func rounded(Self.RoundingRule) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/rounded(_:tomultipleof:)","title":"func rounded(Self.RoundingRule, toMultipleOf: Self) -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/gcd(_:_:)","title":"static func gcd(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/lcm(_:_:)","title":"static func lcm(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/random(in:)-tuuq","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/zufa_llige(in:)","title":"static func zufällige(in: ClosedRange<Self>) -> Self","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber\/wholearithmetic-implementations","title":"WholeArithmetic Implementations","type":"symbol"}],"path":"\/documentation\/sdgprecisionmathematics\/rationalnumber","title":"RationalNumber","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/+=(_:_:)-6216h","title":"static func += (inout WholeNumber, WholeNumber)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/+=(_:_:)-84wz","title":"static func += (inout WholeNumber, WholeNumber.Vector)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/==(_:_:)-7xbt","title":"static func == (WholeNumber, WholeNumber) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-1dem8","title":"static func × (WholeNumber, WholeNumber) -> WholeNumber","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-29apx","title":"static func < (WholeNumber, WholeNumber) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-nrdg","title":"static func − (WholeNumber, WholeNumber) -> WholeNumber.Vector","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_=(_:_:)-3zrzx","title":"static func ×= (inout WholeNumber, WholeNumber)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_=(_:_:)-4fg8u","title":"static func −= (inout WholeNumber, WholeNumber)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(_:)-8dttk","title":"init(UIntMax)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(exactly:)","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/divideaccordingtoeuclid(by:)","title":"func divideAccordingToEuclid(by: WholeNumber)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/formremainder(mod:)-8ntte","title":"func formRemainder(mod: WholeNumber)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/vector","title":"WholeNumber.Vector","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/random(in:using:)","title":"static func random<R>(in: ClosedRange<WholeNumber>, using: inout R) -> WholeNumber","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/+(_:_:)-5yq13","title":"static func + (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/addable-implementations","title":"Addable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/+=(_:_:)-2l256","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/-(_:_:)-2r01x","title":"static func - (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/-=(_:_:)-5ay0f","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/-=(_:_:)-7gi6p","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isapproximatelyequal(to:absolutetolerance:relativetolerance:norm:)","title":"func isApproximatelyEqual<Magnitude>(to: Self, absoluteTolerance: Magnitude, relativeTolerance: Magnitude, norm: (Self) -> Magnitude) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/'...(_:)-9x8f","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/'...(_:)-myq7","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-242xx","title":"static func ≈ (Self, (Self, Self)) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-3svlq","title":"static func ≥ (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-68ns","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-6givh","title":"static func ≤ (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-7chtw","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_=(_:_:)-4ckwk","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_=(_:_:)-7czuc","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/decrease(to:)","title":"func decrease(to: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/increase(to:)","title":"func increase(to: Self)","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/playgrounddescription","title":"var playgroundDescription: Any","type":"property"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/customplaygrounddisplayconvertible-implementations","title":"CustomPlaygroundDisplayConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(from:via:convert:)-4e7ia","title":"init<Other>(from: Decoder, via: Other.Type, convert: (Other) throws -> Self?) throws","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(from:via:convert:)-zsed","title":"init<Other>(from: Decoder, via: Other.Type, convert: (Other) -> Self) throws","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/encode(to:via:)","title":"func encode<Other>(to: Encoder, via: Other) throws","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/==(_:_:)-15cgr","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/=_(_:_:)","title":"static func ≠ (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(integerliteral:)","title":"init(integerLiteral: UIntMax)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isnegative-3t47k","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isnegative-8bamw","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isnonnegative-4iqgx","title":"var isNonNegative: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isnonnegative-zhig","title":"var isNonNegative: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isnonpositive","title":"var isNonPositive: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/ispositive","title":"var isPositive: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/magnitude","title":"var magnitude: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/formabsolutevalue()","title":"func formAbsoluteValue()","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/numericadditivearithmetic-implementations","title":"NumericAdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/advanced(by:)","title":"func advanced(by: Self.Vector) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/decrement()","title":"func decrement()","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/distance(to:)","title":"func distance(to: Self) -> Self.Vector","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/increment()","title":"func increment()","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/predecessor()","title":"func predecessor() -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/successor()","title":"func successor() -> Self","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/onedimensionalpoint-implementations","title":"OneDimensionalPoint Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/+(_:_:)-6hyqr","title":"static func + (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/+(_:_:)-8jx8s","title":"static func + (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-1dvwr","title":"static func − (Self, Self.Vector) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_=(_:_:)-gkgb","title":"static func −= (inout Self, Self.Vector)","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/pointprotocol-implementations","title":"PointProtocol Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/-(_:_:)-468u4","title":"static func - (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/-=(_:_:)-2ov2v","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-1a1pi","title":"static func − (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-8lsby","title":"static func ± (Self, Self) -> (sum: Self, difference: Self)","type":"op"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/subtractable-implementations","title":"Subtractable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(_:)-12u2v","title":"init(StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(binary:)","title":"init(binary: StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(hexadecimal:)","title":"init(hexadecimal: StrictString)","type":"init"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(octal:)","title":"init(octal: StrictString)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/parse(_:base:)","title":"static func parse(StrictString, base: Int) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/parse(fromrepresentation:usingdigits:radixcharacters:formattingseparators:)","title":"static func parse(fromRepresentation: StrictString, usingDigits: [[UnicodeScalar]], radixCharacters: Set<UnicodeScalar>, formattingSeparators: Set<UnicodeScalar>) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/parse(possiblebinary:)","title":"static func parse(possibleBinary: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/parse(possibledecimal:)","title":"static func parse(possibleDecimal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/parse(possiblehexadecimal:)","title":"static func parse(possibleHexadecimal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/parse(possibleoctal:)","title":"static func parse(possibleOctal: StrictString) -> Result<Self, TextConvertibleNumberParseError>","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/textconvertiblenumber-implementations","title":"TextConvertibleNumber Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/*(_:_:)","title":"static func * (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/*=(_:_:)","title":"static func *= (inout Self, Self)","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-61cnq","title":"static func ↑ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_(_:_:)-8r92d","title":"static func × (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_=(_:_:)-9ctfu","title":"static func ↑= (inout Self, Self)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/init(_:)-9ppuv","title":"init<U>(U)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/iseven","title":"var isEven: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isintegral-7yywz","title":"var isIntegral: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isintegral-8f8xl","title":"var isIntegral: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isnatural","title":"var isNatural: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isodd","title":"var isOdd: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/iswhole-3flom","title":"var isWhole: Bool","type":"property"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/iswhole-89i2l","title":"var isWhole: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/dividedaccordingtoeuclid(by:)","title":"func dividedAccordingToEuclid(by: Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/formgreatestcommondivisor(with:)","title":"func formGreatestCommonDivisor(with: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/formleastcommonmultiple(with:)","title":"func formLeastCommonMultiple(with: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/formremainder(mod:)-6ppl4","title":"func formRemainder(mod: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/isdivisible(by:)","title":"func isDivisible(by: Self) -> Bool","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/mod(_:)","title":"func mod(Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/round(_:)-28fam","title":"func round(Self.RoundingRule)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/round(_:)-7nmhs","title":"func round(Self.RoundingRule)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/round(_:tomultipleof:)","title":"func round(Self.RoundingRule, toMultipleOf: Self)","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/rounded(_:)","title":"func rounded(Self.RoundingRule) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/rounded(_:tomultipleof:)","title":"func rounded(Self.RoundingRule, toMultipleOf: Self) -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/gcd(_:_:)","title":"static func gcd(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/lcm(_:_:)","title":"static func lcm(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/random(in:)","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/zufa_llige(in:)","title":"static func zufällige(in: ClosedRange<Self>) -> Self","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/wholearithmetic-implementations","title":"WholeArithmetic Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/_____________(______:)","title":"func בספרות־עבריות(גרשיים: Bool) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/______________________(_______________:_______:)","title":"func σεΕλληνικούςΑριθμούς(μικράΓράμματα: Bool, κεραία: Bool) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/abbreviatedenglishordinal()","title":"func abbreviatedEnglishOrdinal() -> SemanticMarkup","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/abgeku_rztedeutscheordnungszahl()","title":"func abgekürzteDeutscheOrdnungszahl() -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/indigits(thousandsseparator:)","title":"func inDigits(thousandsSeparator: UnicodeScalar) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/inro_mischerzahlschrift(kleinbuchstaben:)","title":"func inRömischerZahlschrift(kleinbuchstaben: Bool) -> StrengeZeichenkette","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/inromannumerals(lowercase:)","title":"func inRomanNumerals(lowercase: Bool) -> StrictString","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/inzahlzeichen(tausendertrennzeichen:)","title":"func inZahlzeichen(tausendertrennzeichen: Unicode.Skalar) -> StrengeZeichenkette","type":"method"},{"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/ordinalfranc_aisabre_ge_(genre:nombre:)","title":"func ordinalFrançaisAbrégé(genre: GenreGrammatical, nombre: GrammaticalNumber) -> SemanticMarkup","type":"method"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber\/wholenumberprotocol-implementations","title":"WholeNumberProtocol Implementations","type":"symbol"}],"path":"\/documentation\/sdgprecisionmathematics\/wholenumber","title":"WholeNumber","type":"struct"}],"path":"\/documentation\/sdgprecisionmathematics","title":"SDGPrecisionMathematics","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}